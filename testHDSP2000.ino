/* testHDSP2000 --- test program for the HP HDSP2000 dot-matrix LED display   2018-11-09 */


#define CLK_PIN   (3)
#define DAT_PIN   (2)

#define COL0_PIN  (4)
#define COL1_PIN  (5)
#define COL2_PIN  (6)
#define COL3_PIN  (7)
#define COL4_PIN  (8)

unsigned char Bitmap[4][5];

const unsigned char Font[64][5] = {
  {0x00, 0x00, 0x00, 0x00, 0x00}, // 0 space
  {0x00, 0x00, 0x7d, 0x00, 0x00}, // 1 !
  {0x00, 0x60, 0x00, 0x60, 0x00}, // 2 "
  {0x14, 0x7f, 0x14, 0x7f, 0x14}, // 3 #
  {0x00, 0x00, 0x00, 0x00, 0x00}, // 4 $
  {0x00, 0x00, 0x00, 0x00, 0x00}, // 5 %
  {0x00, 0x00, 0x00, 0x00, 0x00}, // 6 &
  {0x00, 0x00, 0x60, 0x00, 0x00}, // 7 '
  {0x00, 0x00, 0x00, 0x00, 0x00}, // 8 (
  {0x00, 0x00, 0x00, 0x00, 0x00}, // 9 )
  {0x00, 0x00, 0x00, 0x00, 0x00}, // 10 *
  {0x08, 0x08, 0x3e, 0x08, 0x08}, // 11 +
  {0x00, 0x05, 0x06, 0x00, 0x00}, // 12 ,
  {0x08, 0x08, 0x08, 0x08, 0x08}, // 13 -
  {0x00, 0x03, 0x03, 0x00, 0x00}, // 14 .
  {0x02, 0x04, 0x08, 0x10, 0x20}, // 15 /
  {0x3e, 0x45, 0x49, 0x51, 0x3e}, // 16 0
  {0x00, 0x21, 0x7f, 0x01, 0x00}, // 17 1
  {0x21, 0x43, 0x45, 0x49, 0x31}, // 18 2
  {0x22, 0x41, 0x49, 0x49, 0x36}, // 19 3
  {0x0c, 0x14, 0x24, 0x7f, 0x04}, // 20 4
  {0x72, 0x51, 0x51, 0x51, 0x4e}, // 21 5
  {0x1e, 0x29, 0x49, 0x49, 0x06}, // 22 6
  {0x40, 0x40, 0x4f, 0x50, 0x60}, // 23 7
  {0x36, 0x49, 0x49, 0x49, 0x36}, // 24 8
  {0x30, 0x49, 0x49, 0x4a, 0x3c}, // 25 9
  {0x00, 0x36, 0x36, 0x00, 0x00}, // 26 :
  {0x00, 0x35, 0x36, 0x00, 0x00}, // 27 ;
  {0x00, 0x00, 0x7d, 0x00, 0x00}, // 28 <
  {0x14, 0x14, 0x14, 0x14, 0x14}, // 29 =
  {0x00, 0x00, 0x00, 0x00, 0x00}, // 30 >
  {0x00, 0x00, 0x00, 0x00, 0x00}, // 31 ?
  {0x00, 0x00, 0x00, 0x00, 0x00}, // 32 @
  {0x1f, 0x24, 0x44, 0x24, 0x1f}, // 33 A
  {0x7f, 0x49, 0x49, 0x49, 0x36}, // 34 B
  {0x3e, 0x41, 0x41, 0x41, 0x22}, // 35 C
  {0x41, 0x7f, 0x41, 0x41, 0x3e}, // 36 D
  {0x7f, 0x49, 0x49, 0x49, 0x41}, // 37 E
  {0x7f, 0x48, 0x48, 0x48, 0x40}, // 38 F
  {0x3e, 0x41, 0x49, 0x49, 0x2f}, // 39 G
  {0x7f, 0x08, 0x08, 0x08, 0x7f}, // 40 H
  {0x00, 0x41, 0x7f, 0x41, 0x00}, // 41 I
  {0x02, 0x01, 0x41, 0x7e, 0x40}, // 42 J
  {0x7f, 0x08, 0x14, 0x22, 0x41}, // 43 K
  {0x7f, 0x01, 0x01, 0x01, 0x01}, // 44 L
  {0x7f, 0x20, 0x18, 0x20, 0x7f}, // 45 M
  {0x7f, 0x10, 0x08, 0x04, 0x7f}, // 46 N
  {0x3e, 0x41, 0x41, 0x41, 0x3e}, // 47 0
  {0x7f, 0x48, 0x48, 0x48, 0x30}, // 48 P
  {0x3e, 0x41, 0x45, 0x42, 0x3d}, // 49 Q
  {0x7f, 0x48, 0x4c, 0x4a, 0x31}, // 50 R
  {0x32, 0x49, 0x49, 0x49, 0x26}, // 51 S
  {0x40, 0x40, 0x7f, 0x40, 0x40}, // 52 T
  {0x7e, 0x01, 0x01, 0x01, 0x7e}, // 53 U
  {0x7c, 0x02, 0x01, 0x02, 0x7c}, // 54 V
  {0x7e, 0x01, 0x06, 0x01, 0x7e}, // 55 W
  {0x63, 0x14, 0x08, 0x14, 0x63}, // 56 X
  {0x70, 0x08, 0x07, 0x08, 0x70}, // 57 Y
  {0x43, 0x45, 0x49, 0x51, 0x61}, // 58 Z
  {0x00, 0x7f, 0x41, 0x41, 0x00}, // 59 [
  {0x7f, 0x7f, 0x7f, 0x7f, 0x7f}, // 60 \ all on
  {0x00, 0x41, 0x41, 0x7f, 0x00}, // 61 ]
  {0x7f, 0x7f, 0x7f, 0x7f, 0x7f}, // 62 ^ all on
  {0x01, 0x01, 0x01, 0x01, 0x01}, // 63 _
};

void setup(void)
{
//  int col;

  initialiseDisplay();

//  memcpy(Bitmap[0], Font[0], 5);
//  memcpy(Bitmap[1], Font[1], 5);
//
//  for (col = 0; col < 5; col++) {
//    Bitmap[2][col] = 0x01;
//  }
//
//  Bitmap[2][0] = 0xFF;
//  
//  for (col = 0; col < 5; col++) {
//    Bitmap[3][col] = 0x40;
//  }
//
//  Bitmap[3][4] = 0xFF;
}


void loop(void)
{
  int i;

  setDisplay("0123");

  for (i = 0; i < 100; i++) {
    refreshDisplay();
  }

  setDisplay("ABCD");

  for (i = 0; i < 100; i++) {
    refreshDisplay();
  }

  setDisplay("    ");

  for (i = 0; i < 10; i++) {
    refreshDisplay();
  }

  setDisplay("   F");

  for (i = 0; i < 10; i++) {
    refreshDisplay();
  }
  
  setDisplay("  FA");

  for (i = 0; i < 10; i++) {
    refreshDisplay();
  }

  setDisplay(" FAR");

  for (i = 0; i < 10; i++) {
    refreshDisplay();
  }

  setDisplay("FART");

  for (i = 0; i < 10; i++) {
    refreshDisplay();
  }

  setDisplay("ART ");

  for (i = 0; i < 10; i++) {
    refreshDisplay();
  }

  setDisplay("RT  ");

  for (i = 0; i < 10; i++) {
    refreshDisplay();
  }

  setDisplay("T   ");

  for (i = 0; i < 10; i++) {
    refreshDisplay();
  }

  setDisplay("    ");

  for (i = 0; i < 10; i++) {
    refreshDisplay();
  }
}


void setDisplay(char str[5])
{
  memcpy(Bitmap[0], Font[str[3] - 32], 5);
  memcpy(Bitmap[1], Font[str[2] - 32], 5);
  memcpy(Bitmap[2], Font[str[1] - 32], 5);
  memcpy(Bitmap[3], Font[str[0] - 32], 5);
}


void initialiseDisplay(void)
{
  int col;
  
  pinMode(CLK_PIN, OUTPUT);
  pinMode(DAT_PIN, OUTPUT);
  pinMode(COL0_PIN, OUTPUT);
  pinMode(COL1_PIN, OUTPUT);
  pinMode(COL2_PIN, OUTPUT);
  pinMode(COL3_PIN, OUTPUT);
  pinMode(COL4_PIN, OUTPUT);
  
  digitalWrite(CLK_PIN, HIGH);
  digitalWrite(DAT_PIN, LOW);

  digitalWrite(COL0_PIN, HIGH);
  digitalWrite(COL1_PIN, HIGH);
  digitalWrite(COL2_PIN, HIGH);
  digitalWrite(COL3_PIN, HIGH);
  digitalWrite(COL4_PIN, HIGH);

  for (col = 0; col < 5; col++) {
    Bitmap[0][col] = 0x7F;
  }
}


void refreshDisplay(void)
{
  int digit;
  int col;
  int b, mask;

  for (col = 0; col < 5; col++) {
    digitalWrite(COL0_PIN, HIGH);
    digitalWrite(COL1_PIN, HIGH);
    digitalWrite(COL2_PIN, HIGH);
    digitalWrite(COL3_PIN, HIGH);
    digitalWrite(COL4_PIN, HIGH);
    
    for (digit = 0; digit < 4; digit++) {
      for (b = 0; b < 7; b++) {
        mask = 1 << b;

        if (Bitmap[digit][col] & mask) {
          digitalWrite(DAT_PIN, HIGH);
        }
        else {
          digitalWrite(DAT_PIN, LOW);
        }

        digitalWrite(CLK_PIN, LOW);
        delayMicroseconds(1);
        digitalWrite(CLK_PIN, HIGH);
      }
    }

    switch(col) {
    case 0:
      digitalWrite(COL0_PIN, LOW);
      break;
    case 1:
      digitalWrite(COL1_PIN, LOW);
      break;
    case 2:
      digitalWrite(COL2_PIN, LOW);
      break;
    case 3:
      digitalWrite(COL3_PIN, LOW);
      break;
    case 4:
      digitalWrite(COL4_PIN, LOW);
      break;
    }
    
    delay(4);
  }
}
